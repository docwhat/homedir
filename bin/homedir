#!/usr/bin/python -utWall
# -*- coding: utf-8 -*-
COPYRIGHT = """
This is a package management system designed to work around packages
for your home directory.  The code is based upon ideas from GNU Stow.

HomeDir - manage your home directory.
Copyright (C) 2004-2010 by Christian HÃ¶ltje

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
"""
import os, sys, traceback

sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), 'lib'))

## TODO - Installation tracker so that user can just 'update' without specifying packages.

VERSION="2.6"
COMMANDS = None # this is set below
HOME = os.path.expanduser("~/") # easy way to do it
HOMEDIR = os.path.expanduser("~/.homedir")

###
### Version Check
###
if sys.version_info < (2,5):
    print >> sys.stderr, """

This program requires python 2.5.
You're running python %(ver)s

Please update your python.

If you have a newer python on the system, then please run:
  /path/to/your/newer/python %(name)s setup --force

It will update your copy of homedir and fix the path to python.
""" % {
'ver': sys.version,
'name': os.path.basename(__file__)
}
    sys.exit(1)

import optparse
from homedir.package  import *
from homedir.catalog  import *
from homedir.pathname import Pathname
from homedir.setup    import getch
from homedir.handle   import *

class resolveConflict:
    counter = 0
    def __call__(package, src, dst):
        "Ask the user to resolve any conflicts"
        assert(isinstance(src, Pathname))
        assert(isinstance(dst, Pathname))
        if not package.counter:
            print "[conflict]"
        package.counter += 1

        legit_answers = ['c','d','s']

        # Information about the source
        src_display = None
        if src.isdir():
            src_display = "I want to replace it with a directory"
        elif src.exists():
            src_display = "I want to replace it with a file"


        # Possible move candidate
        dstmove = Pathname("%s.bak" % dst)
        if dstmove.exists():
            legit_answers.append('o')
        else:
            legit_answers.append('r')
        legit_answers.append('q')

        # Collect possible extra information
        dst_display = dst
        if dst.isdir():
            ftype = "dir"
        elif dst.islink():
            ftype = 'symlink'
        elif dst.exists():
            ftype = "file"
        else:
            ftype = "????"

        link_display = None
        if dst.islink():
            link_display = "It points to '%s'" % dst.readlink()
            if dst.exists():
                ftype = "symlink"
            else:
                ftype = "broken symlink"
                link_display += " which does not exist"
            link_display += '.'

        answer = ''
        count = 0
        while answer not in legit_answers:
            count += 1
            if count > 20:
                print "...Skipping..."
                answer = 's'
                continue
            print " ","*"*40
            print "    CONFLICT: The %s '%s' is in the way." % (ftype,dst_display)
            if link_display:
                print "              %s" % link_display
            if src_display:
                print "              %s" % src_display
            print "    I can do the following:"
            print "       c - cancel package"
            print "       d - destroy the current file"
            print "       s - skip file"
            if 'r' in legit_answers:
                print "       r - rename '%s' to '%s'" % (dst,dstmove.basename())
            if 'o' in legit_answers:
                print "       o - rename '%s' to '%s', over-writing the existing .bak file" % (dst,dstmove.basename())
            print "       q - quit"
            print "    Your choice? [%s] " % "/".join(legit_answers),
            answer = getch().strip().lower()
            if answer == '!':
                raise StandardError('You triggered a debugging feature!')

        print
        if answer == 'q':
            print "Okay then, quitting..."
            sys.exit(0)
        elif answer == 'c':
            raise ConflictError(src=src, dst=dst)
        elif answer == 'd':
            if dst.exists():
                dst.unlink()
            return True
        elif answer == 's':
            return False
        elif answer == 'r':
            if dstmove.exists():
                raise ConflictError("A file has prevented backup %s"%dstmove,
                                    src=src, dst=dst)
            dst.rename(dstmove)
            return True
        elif answer == 'o':
            if dstmove.exists():
                dstmove.unlink()
            dst.rename(dstmove)
            return True
        else:
            raise AssertionError("The while loop should prevent this from ever happening.")
Package.conflict_resolver = resolveConflict()

def actionLoop( func, action, packages ):
    for package in packages:
        try:
            package.conflict_resolver.counter = 0
            start = "%-60s" % ("    %s %s..." % (action,package.package))
            print start,
            func(package)
            if package.conflict_resolver.counter:
                print start,
            print "[ok]"
        except ConflictError,err:
            print "[incomplete]"
            print >> sys.stderr, "There was an unresolved conflict while %s '%s' on file:" % (action,package.package)
            print >> sys.stderr, "    %s" % err

def do_list(options, catalog):
    "Do the list command"

    pkgs = catalog.all()
    pkgs.sort()

    # Get the maximum name size for better formatting.
    max_name = reduce(lambda prev,next: max(prev,len(next)), [p.name for p in pkgs], 0)

    template = " %%-%ds  %%s" % max_name

    print template % ("name",
                      "description")
    print template % ("-" * max_name,
                      "-" * (78 - max_name - 2 ))

    for pkg in pkgs:
        print template % (pkg.package,
                          pkg.short_description)

    print "%d packages" % len(pkgs)

def do_install(options, catalog, *packages):
    "Do the install command"
    # lookup the packages
    packages = catalog.find(*packages)
    sorted_packages = list(packages)
    sorted_packages.sort()

    print
    print "You asked me to install %s:" % pluralize('this package',
                                                    'these packages',
                                                    len(packages))
    for p in sorted_packages:
        print "    %s \t%s" % (p.package,p.short_description)


    # Do dependencies
    deps = catalog.findDependencies(*packages).difference(packages)
    sorted_deps= list(deps)
    sorted_deps.sort()

    if deps:
        print
        print "I need to install the following extra %s to meet dependencies:"%\
              pluralize('package','packages',len(deps))
        for p in sorted_deps:
            print "    %s \t%s" % (p.package,p.short_description)

        print "Is that okay? [Y/n] ",
        response = sys.stdin.readline().strip()
        if response and response[0].upper() != 'Y':
            print "Okay then, quitting..."
            sys.exit(0)
    print "Installing Packages..."
    actionLoop( lambda p:p.install(HOME), 'installing', packages.union(deps))

def do_remove(options, catalog, *packages):
    "Do the uninstall command"
    # lookup the packages

    packages = catalog.find(*packages)
    sorted_packages = list(packages)
    sorted_packages.sort()

    print
    print "You asked me to remove %s:" % pluralize('this package',
                                                   'these packages',
                                                   len(packages))
    for p in sorted_packages:
        print "    %s \t%s" % (p.package,p.short_description)
    if not packages:
        print "    None"


    # Do dependencies
    deps = catalog.findReverseDependencies(*packages).difference(packages)
    sorted_deps= list(deps)
    sorted_deps.sort()

    if deps:
        print
        print "The following %s depend on the above %s and will be" % (
              pluralize('package','packages',len(deps)),
              pluralize('package','packages',len(packages)))

        print "removed if installed:"
        for p in sorted_deps:
            print "    %s \t%s" % (p.package, p.short_description)

        print "Is that okay? [y/N] ",
        response = sys.stdin.readline().strip()
        if not response or response[0].upper() == 'N':
            print "Okay then, quitting..."
            sys.exit(0)

    print "Removing Packages..."

    actionLoop( lambda p:p.remove(HOME), 'removing', deps.union(packages) )

def do_upgrade(options, catalog, *packages):

    packages = catalog.find(*packages)
    sorted_packages = list(packages)
    sorted_packages.sort()

    print
    print "You asked me to upgrade %s:" % pluralize('this package',
                                                    'these packages',
                                                    len(packages))

    for p in sorted_packages:
        print "    %s \t%s" % (p.package,p.short_description)
    if not packages:
        print "    None"

    # Do dependencies
    deps = catalog.findDependencies(*packages).difference(packages)
    sorted_deps= list(deps)
    sorted_deps.sort()

    # don't duplicate packages, please!
    rdeps = catalog.findReverseDependencies(*packages).difference(packages).difference(deps)
    sorted_rdeps= list(rdeps)
    sorted_rdeps.sort()


    if deps:
        print
        print "The following %s have dependencies that interact with " %\
              pluralize('package','packages',len(deps))
        print "the above %s and will be upgraded as well:" % pluralize(
            'package','packages',len(deps))
        for p in sorted_deps:
            print "    %s \t%s" % (p.package,p.short_description)

    if rdeps:
        print
        print "You might need to re-install %s" % \
              pluralize('this package','these packages',len(rdeps)),
        print "manually afterwards:"
        for p in sorted_rdeps:
            print "    %s \t%s" % (p.package,p.short_description)

    if deps or rdeps:
        print
        print "Is that okay? [y/N] ",
        response = sys.stdin.readline().strip()
        if not response or response[0].upper() == 'N':
            print "Okay then, quitting..."
            sys.exit(0)

    print "Updating Packages..."

    # UnInstall Only
    actionLoop( lambda p:p.remove(HOME), 'removing', rdeps )
    def func(package):
        package.remove(HOME)
        package.install(HOME)

    actionLoop( func, 'upgrading', packages.union(deps) )

def do_setup(options, catalog):
    from homedir.setup import Setup, getVersion
    if options.force:
        latest = VERSION + 'nomatch'
    else:
        latest = getVersion()
    if latest == VERSION:
        print "You already have the latest version."
    else:
        Setup(via_web=True)

COMMANDS = {'list': do_list,
            'install': do_install,
            'remove': do_remove,
            'upgrade': do_upgrade,
            'setup': do_setup,
            }

class Application:
    "A Class to hold the core application functions."


def doParse():
    """Actually does the command line parsing.
    Returns (options, args) (as per optparse's parse_args
    """
    usage = """%prog [options] <command> arg(s)

commands:
  install PKG ...       Install a package.
  remove PKG ...        Uninstall a package.
  upgrade PKG ...       Upgrade your installed packages (reinstall).
  list                  List all packages.
  setup [-f|--force]    Install or upgrade homedir (force even if up-to-date)."""
    parser = optparse.OptionParser(version=VERSION, usage=usage)

    parser.add_option('-q','--quiet',
                      action="store_true", dest="quiet",
                      default=False,
                      help="Run without warnings and messages. Errors are still shown.")
##     parser.add_option('-n','--dry-run',
##                       action="store_true", dest="dry_run",
##                       default=False,
##                       help="Show the actions that would have been taken, "
##                       "but don't actually do them")
    parser.add_option('-f', '--force', action="store_true", help=optparse.SUPPRESS_HELP)
    parser.add_option('-d','--debug',
                      action="store_true", dest="debug",
                      default=False,
                      help=optparse.SUPPRESS_HELP)
    parser.add_option('--copyright', action="store_true", help="Show the copyright and exit.")

    (options,args) = parser.parse_args()

    warn_mode(options.debug)

    if options.copyright:
        print COPYRIGHT
        sys.exit(0)

    if not args:
        parser.print_help()
        sys.exit(0)
    if args[0] not in COMMANDS.keys():
        parser.error("Invalid command '%s'" % args[0])

    return options,args

if "__main__" == __name__:
    try:
        options, args = doParse()
        command = args[0]
        rest_args = args[1:]
        catalog = Catalog(debug=options.debug)

        COMMANDS[command](options,catalog,*rest_args)
    except KeyboardInterrupt:
        print >> sys.stderr, "\nUser Aborted",
        sys.exit(1)


# Local Variables:
# mode: python
# tab-width: 4
# indent-tabs-mode: nil
# End:
# vim: set sw=4 ts=4 expandtab
